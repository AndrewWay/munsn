#!/usr/bin/env node

var http = require('http');

var port = "";
switch (process.argv[2]) {
  case 'dev':
    http.get({
      'host': 'api.ipify.org',
      'port': 80,
      'path': '/'
    }, function (resp) {
      resp.on('data', function (ip) {
        process.env.HOSTNAME = process.env.IP = ip;
        process.env.ADDRESS = process.env.HOSTNAME + ':' + process.env.PORT;
        console.log("Server Address:", process.env.ADDRESS);
      });
    });
    port = process.env.PORT = normalizePort(3000);
    break;
  case 'prod':
    http.get({
      'host': 'api.ipify.org',
      'port': 80,
      'path': '/'
    }, function (resp) {
      resp.on('data', function (ip) {
        process.env.IP = ip;
      });
    });
    port = process.env.PORT = normalizePort(3336);
    process.env.HOSTNAME = 'sc-6.cs.mun.ca';
    process.env.MONGO_URL = 'mongodb://localhost:27272/munsn';
    process.env.ADDRESS = process.env.HOSTNAME; //Don't need the port for MUN's server
    console.log("Server Address:", process.env.ADDRESS);
    break;
  default:
    http.get({
      'host': 'api.ipify.org',
      'port': 80,
      'path': '/'
    }, function (resp) {
      resp.on('data', function (ip) {
        port = process.env.PORT = normalizePort(3000);
        process.env.HOSTNAME = process.env.IP = ip;
        process.env.ADDRESS = process.env.HOSTNAME + ':' + process.env.PORT;
        console.log("Server Address:", process.env.ADDRESS);
      });
    });
    break;
}
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var sharedsession = require("express-socket.io-session");


/**
 * Get port from environment and store in Express.
 */
console.log(port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.sharedsession = sharedsession;
module.exports = io;
var nsChat = require('../utils/socket/chat');
var nsNotif = require('../utils/socket/notif');